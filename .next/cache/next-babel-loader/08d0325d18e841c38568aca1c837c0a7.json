{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/patmccue/Desktop/LetsEat/components/restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(\"Query Data: \".concat(data.restaurants));\n  var searchQuery = data.restaurants.filter(function (res) {\n    return res.name.toLowerCase().includes(props.search);\n  }) || [];\n  var restId = searchQuery[0] ? searchQuery[0].id : null; // define renderer for Dishes\n\n  var renderDishes = function renderDishes(restaurantID) {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"12\",\n        sm: \"6\",\n        md: \"6\",\n        lg: \"4\",\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\",\n          height: \"500px\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        style: {\n          paddingTop: \"56.25%\",\n          position: \"relative\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\"\n        },\n        src: \"http://localhost:1337\" + res.image.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      })), __jsx(CardBody, {\n        style: {\n          height: \"400px\",\n          overflow: \"hidden\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, __jsx(CardText, {\n        style: {\n          overflowY: 'auto',\n          maxHeight: '100%'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer text-center\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: function onClick() {\n          return setRestaurantID(res.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }\n      }, res.name))));\n    });\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\n_s(RestaurantList, \"AG1Od7CGruCtgOneqAeKWk/inGw=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["/Users/patmccue/Desktop/LetsEat/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","restId","id","renderDishes","length","restList","map","margin","height","paddingTop","position","top","left","width","image","url","overflow","overflowY","maxHeight","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\"\nimport { useContext, useState } from 'react';\n\n\nimport AppContext from \"./context\"\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0)\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`)\n\n\n  let searchQuery = data.restaurants.filter((res) => {\n    return res.name.toLowerCase().includes(props.search)\n  }) || [];\n\n  let restId = searchQuery[0] ? searchQuery[0].id : null;\n\n  // define renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return (<Dishes restId={restaurantID}> </Dishes>)\n  };\n  if (searchQuery.length > 0) {\n      const restList = searchQuery.map((res) => (\n        <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"4\" key={res.id}>\n          <Card style={{ margin: \"0 0.5rem 20px 0.5rem\", height: \"500px\" }}>\n            <div style={{ paddingTop: \"56.25%\", position: \"relative\" }}>\n              <CardImg\n                top={true}\n                style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\" }}\n                src={`http://localhost:1337` + res.image.url}\n              />\n            </div>\n            <CardBody style={{ height: \"400px\", overflow: \"hidden\" }}>\n              <CardText style={{ overflowY: 'auto', maxHeight: '100%' }}>{res.description}</CardText>\n            </CardBody>\n            <div className=\"card-footer text-center\">\n              <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>{res.name}</Button>\n            </div>\n          </Card>\n        </Col>\n      ));\n\n    return (\n\n      <Container>\n        <Row xs='3'>\n          {restList}\n        </Row>\n\n        <Row xs='3'>\n          {renderDishes(restaurantID)}\n        </Row>\n\n      </Container>\n\n    )\n  } else {\n    return <h1> No Restaurants Found</h1>\n  }\n}\nexport default RestaurantList"]},"metadata":{},"sourceType":"module"}